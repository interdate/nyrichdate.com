<?php

namespace AppBundle\Entity;

use AppBundle\Services\Messenger\Config;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\EntityRepository;
use Doctrine\Common\Collections\ArrayCollection;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserLoaderInterface
{
    private $currentUser;
    private $data;
    private $admin = false;
    private $export = false;

    public function loadUserByUsername($username)
    {
        $user = $this->createQueryBuilder('u')
            ->where('u.username = :username OR u.email = :email')
            ->setParameter('username', $username)
            ->setParameter('email', $username)
            ->getQuery()
            ->getOneOrNullResult();

        if (null === $user) {
            $message = sprintf(
                'Unable to find an active user AppBundle:User object identified by "%s".',
                $username
            );
            throw new UsernameNotFoundException($message);
        }

        return $user;
    }

    public function loadUserByUsernameApi($username)
    {
        $user = $this->createQueryBuilder('u')
            ->where('u.username = :username OR u.email = :email')
            ->setParameter('username', $username)
            ->setParameter('email', $username)
            ->getQuery()
            ->getOneOrNullResult();

        return $user;
    }

    public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);
        if (!$this->supportsClass($class)) {
            throw new UnsupportedUserException(
                sprintf(
                    'Instances of "%s" are not supported.',
                    $class
                )
            );
        }

        return $this->find($user->getId());
    }

    public function supportsClass($class)
    {
        return $this->getEntityName() === $class
        || is_subclass_of($class, $this->getEntityName());
    }

    public function getOnline($settings)
    {
        $this->currentUser = $settings['current_user'];
        $this->data = $settings['data'];
        $delay = new \DateTime();
        $delay->setTimestamp(strtotime($settings['considered_as_online_minutes_number'] . ' minutes ago'));

        $qb = $this->createQueryBuilder('u');
        $qb->where('u.lastActivityAt > :delay')
            ->setParameter('delay', $delay)
        ;

        if( $this->currentUser instanceof User and $this->currentUser->getId() !== 111){
            $qb->andWhere('(u.gender <> :gender OR u.id = :admin_id)')
                ->setParameter('gender', $this->currentUser->getGender())
                ->setParameter('admin_id', 111)
            ;
        }

        $this->setSearchFilter($qb, $settings['per_page']);

        if($settings['data']['filter'] == 'popularity'){
            $users = $qb->getQuery()->getResult();
            shuffle($users);
            return $users;
        }

        return $settings['paginator']->paginate($qb->getQuery(), $settings['page'], $settings['per_page']);
    }

    /**
     * @param $settings
     * @return mixed
     */
    public function getNew($settings)
    {

        $this->currentUser = (is_object($settings['current_user'])) ? $settings['current_user'] : null;

        $delay = new \DateTime();
        $delay->setTimestamp(strtotime($settings['considered_as_new_days_number'] . ' days ago'));

        $qb = $this->createQueryBuilder('u')
            //->where('u.signUpDate > :delay')
            ->where('u.isActive = 1')
            ->andWhere('u.isActivated = 1')
            ->andwhere('u.isNonLocked = 1')
            ->andwhere('u.isFrozen = 0')
            //->setParameter('delay', $delay)
            //->setMaxResults($settings['per_page'])
        ;

        if(!isset($settings['data']['filter']) or empty($settings['data']['filter'])) {
            $settings['data']['filter'] = 'new';
        //}else{
            //$qb->orderBy('u.id', 'DESC');
        }

        $this->data = $settings['data'];
        $this->setSearchFilter($qb, $settings['per_page']);

        /*if(!isset($settings['paginator'])) {
            $qb->setMaxResults($settings['per_page']);
        }*/

        /*
        if($this->currentUser instanceof User && !$this->currentUser->isAdmin()){
            //$qb->andWhere('u.gender <> :gender')->setParameter('gender', $this->currentUser->getGender()->getId());
            $qb->andWhere('(u.gender <> :gender OR u.id = :admin_id)')
                ->setParameter('gender', $this->currentUser->getGender())
                ->setParameter('admin_id', 111)
            ;
        }
        */

        /*if(!isset($settings['paginator'])) {
            return $qb->getQuery()->getResult();
        }else*/
        //var_dump(is_object($settings['paginator']));
        if(is_object($settings['paginator'])) {
            return $settings['paginator']->paginate($qb->getQuery(), $settings['page'], $settings['per_page']);
        }else{
            $qb->setMaxResults($settings['per_page']);
            return $qb->getQuery()->getResult();
        }
    }

    public function search($settings)
    {
        $this->currentUser = $settings['current_user'];
        $this->data = $settings['data'];

        if(!isset($settings['per_page'])){
            $settings['per_page'] = null;
        }

        $qb = $this->createQueryBuilder('u');

        if(!empty($this->data['id'])){
            $id = (int)trim($this->data['id']);
            $qb->where('u.id = :id')->setParameter('id', $id);
        }
        elseif(!empty($this->data['email'])){
            $email = trim($this->data['email']);
            $qb->where(
                $qb->expr()->like('u.email', ":email")
            )->setParameter('email', '%' . $email . '%');
        }
        elseif(!empty($this->data['username'])){
            $username = trim($this->data['username']);
            $qb->where(
                $qb->expr()->like('u.username', ":username")
            )->setParameter('username', '%' . $username . '%');
        }
        elseif(isset($this->data['phone']) and $this->data['phone'] !== ''){
            $phone = trim($this->data['phone']);
            $phone = preg_replace('/[^0-9]/', '', $phone);
            if(substr($phone, 0, 1) == '0'){
                $phone = '972' . substr($phone, 1);
            }
            //var_dump($phone);die();
            $qb->where(
                $qb->expr()->like('u.phone', ":phone")
            )->setParameter('phone', '%' . $phone . '%');
        }
        else{

            if($this->admin){
                if(!empty($this->data['zipCodeSingle'])){
                    $qb->andWhere('u.zipCode = :zipCode')->setParameter('zipCode', $this->data['zipCodeSingle']);
                }
                else{
                    if(!empty($this->data['zipCode'][0])){
                        $qb->andWhere(
                            $qb->expr()->in('u.zipCode', ":zipCode")
                        )->setParameter('zipCode', $this->data['zipCode']);
                    }
                    elseif(!empty($this->data['area'][0])){
                        $qb->join('u.zipCode', 'z', 'WITH',
                            $qb->expr()->in('z.area', ':area')
                        )->setParameter('area', $this->data['area']);
                    }
                    elseif(!empty($this->data['region'][0])){
                        $qb->join('u.zipCode', 'z', 'WITH');
                        $qb->join('z.area', 'a', 'WITH',
                            $qb->expr()->in('a.region', ':region')
                        )->setParameter('region', $this->data['region']);
                    }
                }
            }
            else{

                if(!empty($this->data['area'][0])){
                    $qb->join('u.zipCode', 'z', 'WITH',
                        $qb->expr()->in('z.area', ':area')
                    )->setParameter('area', $this->data['area']);
                }
                elseif(!empty($this->data['region'][0])){
                    $qb->join('u.zipCode', 'z', 'WITH');
                    $qb->join('z.area', 'a', 'WITH',
                        $qb->expr()->in('a.region', ':region')
                    )->setParameter('region', $this->data['region']);
                }
            }

            if(!empty($this->data['type'][0])){
                $qb->andWhere(
                    $qb->expr()->in('u.type', ":type")
                )->setParameter('type', $this->data['type']);
            }

            if(!empty($this->data['ageFrom']) && !empty($this->data['ageTo'])){
                $this->data['date_1'] = date("Y") - $this->data['ageFrom'] . '-' . date("m") . '-' . date("d");
                $this->data['date_2'] = date("Y") - $this->data['ageTo'] . '-01-01';

                $qb->andWhere('u.birthday <= :date_1')
                    ->andWhere('u.birthday >= :date_2')
                    ->setParameter('date_1', $this->data['date_1'])
                    ->setParameter('date_2', $this->data['date_2'])
                ;
            }

            if(!empty($this->data['status'][0])){
                $qb->andWhere(
                    $qb->expr()->in('u.status', ":status")
                )->setParameter('status', $this->data['status']);
            }

            if(!empty($this->data['netWorth'][0])){
                $qb->andWhere(
                    $qb->expr()->in('u.netWorth', ":netWorth")
                )->setParameter('netWorth', $this->data['netWorth']);
            }

            if(!empty($this->data['income'][0])){
                $qb->andWhere(
                    $qb->expr()->in('u.income', ":income")
                )->setParameter('income', $this->data['income']);
            }

            if(!empty($this->data['heightFrom']) && !empty($this->data['heightTo'])){
                $qb->andWhere('u.height >= :heightFrom')
                    ->andWhere('u.height <= :heightTo')
                    ->setParameter('heightFrom', $this->data['heightFrom'])
                    ->setParameter('heightTo', $this->data['heightTo'])
                ;
            }

            if(!empty($this->data['body'][0])){
                $qb->andWhere(
                    $qb->expr()->in('u.body', ":body")
                )->setParameter('body', $this->data['body']);
            }

            if(!empty($this->data['features'][0])){
                $qb->join('u.features', 'f', 'WITH',
                    $qb->expr()->in('f.id', ':features')
                )->setParameter('features', $this->data['features']);
            }

            if(!empty($this->data['relationshipStatus'][0])){
                $qb->andWhere(
                    $qb->expr()->in('u.relationshipStatus', ":relationshipStatus")
                )->setParameter('relationshipStatus', $this->data['relationshipStatus']);
            }

            if(!empty($this->data['education'][0])){
                $qb->andWhere(
                    $qb->expr()->in('u.education', ":education")
                )->setParameter('education', $this->data['education']);
            }

            if(!empty($this->data['languages'][0])){
                $qb->join('u.languages', 'l', 'WITH',
                    $qb->expr()->in('l.id', ':languages')
                )->setParameter('languages', $this->data['languages']);
            }

            if(!empty($this->data['religion'][0])){
                $qb->andWhere(
                    $qb->expr()->in('u.religion', ":religion")
                )->setParameter('religion', $this->data['religion']);
            }

            if(!empty($this->data['ethnicity'][0])){
                $qb->andWhere(
                    $qb->expr()->in('u.ethnicity', ":ethnicity")
                )->setParameter('ethnicity', $this->data['ethnicity']);
            }

            if(!empty($this->data['purposes'][0])){
                $qb->join('u.purposes', 'p', 'WITH',
                    $qb->expr()->in('p.id', ':purposes')
                )->setParameter('purposes', $this->data['purposes']);
            }

            if(!empty($this->data['smoking'][0])){
                $qb->andWhere(
                    $qb->expr()->in('u.smoking', ":smoking")
                )->setParameter('smoking', $this->data['smoking']);
            }

            if(!empty($this->data['drinking'][0])){
                $qb->andWhere(
                    $qb->expr()->in('u.drinking', ":drinking")
                )->setParameter('drinking', $this->data['drinking']);
            }

            if(!empty($this->data['children'])){
                $qb->andWhere('u.children = :children')->setParameter('children', $this->data['children']);
            }

            if(!empty($this->data['hobbies'][0])){
                $qb->join('u.hobbies', 'h', 'WITH',
                    $qb->expr()->in('h.id', ':hobbies')
                )->setParameter('hobbies', $this->data['hobbies']);
            }

            if(!empty($this->data['withPhoto'])){
                /*
                $qb->join('u.photos', 'p', 'WITH',
                    $qb->expr()->andX(
                        $qb->expr()->eq('p.isMain', true),
                        $qb->expr()->eq('p.isValid', true)
                    )
                );
                */
                $qb->join('u.photos', 'ph', 'WITH',
                    $qb->expr()->eq('ph.isValid', true)
                );
            }

            /*
            if(!empty($this->data['gender']) && !empty($this->data['lookingGender'])){
                $qb->andWhere('u.gender = :gender')
                    ->andWhere('u.lookingGender = :lookingGender')
                    ->setParameter('gender', $this->data['lookingGender'])
                    ->setParameter('lookingGender', $this->data['gender'])
                ;
            }
            */
            //var_dump(empty($this->data['gender']));die;
            if( !empty($this->data['gender']) ){
                $qb->andWhere('u.gender = :gender')
                    ->setParameter('gender', $this->data['gender'])
                ;
            }

            if($this->admin){

                if(!empty($this->data['zodiac'])) {
                    $qb->andWhere(
                        $qb->expr()->in('u.zodiac', ":zodiac")
                    )->setParameter('zodiac', $this->data['zodiac']);
                }

                if(!empty($this->data['loginFrom'])) {
                    $qb->andWhere(
                        $qb->expr()->in('u.loginFrom', ":loginFrom")
                    )->setParameter('loginFrom', $this->data['loginFrom']);
                }

                if(!empty($this->data['isActive'])){
                    $isActive = $this->data['isActive'] == 1 ? 1 : 0;
                    $qb->andWhere('u.isActive = ' . $isActive);
                }

                if(!empty($this->data['isActivated'])){
                    $isActive = $this->data['isActivated'] == 1 ? 1 : 0;
                    $qb->andWhere('u.isActivated = ' . $isActive);
                }

                if(!empty($this->data['isFrozen'])){
                    $isFrozen = $this->data['isFrozen'] == 1 ? 1 : 0;
                    $qb->andWhere('u.isFrozen = ' . $isFrozen);
                }

                if(!empty($this->data['isPhone'])){
                    $not = $this->data['isPhone'] == 1 ? 'NOT ' : '';
                    $qb->andWhere("u.phone IS " . $not . "NULL");
                }

                if(!empty($this->data['hasPoints'])){
                    if($this->data['hasPoints'] == 1){
                        $qb->andWhere("u.points > 0");
                    }
                    else{
                        $qb->andWhere("u.points = 0");
                    }
                }

                if(!empty($this->data['isPaying'])){

                    $date = date("Y-m-d");

                    if($this->data['isPaying'] == 1){
                        $qb->andWhere("u.startSubscription <= '" . $date ."'")
                            ->andWhere("u.endSubscription >= '" . $date . "'")
                        ;
                    }
                    else{
                        $qb->andWhere(
                            "u.startSubscription IS NULL OR u.endSubscription IS NULL OR u.endSubscription < '" . $date . "'"
                        );
                    }
                }

                if(!empty($this->data['isPhoto'])){
                    if($this->data['isPhoto'] == 1){
                        $qb->join('u.photos', 'ph', 'WITH',
                            $qb->expr()->eq('ph.isValid', true)
                        );
                    }
                    else{
                        $qb->andWhere(
                            $qb->expr()->not(
                                $qb->expr()->exists("SELECT ph.id FROM AppBundle:Photo ph WHERE  ph.user = u.id AND ph.isValid = 1")
                            )
                        );
                    }
                }

                if(!empty($this->data['startSubscriptionFrom']) && !empty($this->data['startSubscriptionTo'])){
                    $this->setFromToDateConditions(
                        $this->data['startSubscriptionFrom'],
                        $this->data['startSubscriptionTo'],
                        'startSubscription',
                        $qb
                    );
                }

                if(!empty($this->data['endSubscriptionFrom']) && !empty($this->data['endSubscriptionTo'])){
                    $this->setFromToDateConditions(
                        $this->data['endSubscriptionFrom'],
                        $this->data['endSubscriptionTo'],
                        'endSubscription',
                        $qb
                    );
                }

                if(!empty($this->data['signUpFrom']) && !empty($this->data['signUpTo'])){
                    $this->setFromToDateConditions(
                        $this->data['signUpFrom'],
                        $this->data['signUpTo'],
                        'signUpDate',
                        $qb
                    );
                }

                if(!empty($this->data['lastVisitedFrom']) && !empty($this->data['lastVisitedTo'])){
                    $this->setFromToDateConditions(
                        $this->data['lastVisitedFrom'],
                        $this->data['lastVisitedTo'],
                        'lastActivityAt',
                        $qb
                    );
                }

                if(!empty($this->data['ip'])) {
                    $qb->andWhere('u.ip = :ip')->setParameter('ip', $this->data['ip']);
                }

                //echo $qb->getDQL();
                //die;
            }else{
                if( empty($this->data['gender']) and $this->currentUser instanceof User and $this->currentUser->getId() !== 111){
                    //$qb->andWhere('u.gender <> :gender1')
                    //    ->setParameter('gender1', $this->currentUser->getGender()->getId())
                    //;

                }
            }

            if(isset($this->data['distance']) and (int)$this->data['distance'] > 0 and $this->currentUser->getLatitude() != null and $this->currentUser->getLongitude() != null){
                $qb->andWhere('(u.latitude IS NOT NULL AND u.longitude IS NOT NULL)');
                $qb->andWhere('get_distance(u.latitude,u.longitude,' . $this->currentUser->getLatitude() . ',' . $this->currentUser->getLongitude() . ') < ' . (int)$this->data['distance']);
            }
        }

        $this->setSearchFilter($qb, $settings['per_page']);

        if($this->export){
            return $qb->distinct()->getQuery()->getArrayResult();
        }
        //return $qb->getQuery()->getResult();
        if(isset($this->data['filter']) && $this->data['filter'] == 'popularity'){
            $users = $qb->getQuery()->getResult();
            shuffle($users);
            return $users;
        }

        if(isset($settings['allResults']) and $settings['allResults']){
            $users = $qb->getQuery()->getResult();
            return $users;
        }

        if(isset($settings['getCount']) and $settings['getCount']){
            //var_dump();die;
            return count($qb->getQuery()->getResult());
        }

        return $settings['paginator']->paginate($qb->getQuery(), $settings['page'], $settings['per_page']);
    }

    private function setSearchFilter($qb, $perPage = null)
    {
        if(null === $this->data || !isset($this->data['filter'])){
            $this->data['filter'] = '';
        }

        if(!$this->admin){

            $qb->andWhere('u.isActive = 1')
                ->andWhere('u.isActivated = 1')
                ->andWhere('u.isNonLocked = 1')
                ->andWhere('u.isFrozen = 0')
            ;

            if($this->currentUser instanceof User && !$this->currentUser->isAdmin()){
                $qb->andWhere('(u.gender <> :gender OR u.id = :admin_id)')
                    ->setParameter('gender', $this->currentUser->getGender())
                    ->setParameter('admin_id', 111)
                ;
            }

        }


        switch($this->data['filter'])
        {
            default:
            case 'lastActivity':

                $qb->orderBy('u.lastActivityAt', 'DESC');
                break;

            case 'distance':
                if($this->currentUser->getLatitude() != null and $this->currentUser->getLongitude() != null) {
                    if(!isset($this->data['distance']) or (int)$this->data['distance'] == 0){
                        $qb->andWhere('(u.latitude IS NOT NULL AND u.longitude IS NOT NULL)');
                    }
                    $qb->orderBy('get_distance(u.latitude,u.longitude,' . $this->currentUser->getLatitude() . ',' . $this->currentUser->getLongitude() . ')', 'ASC');
                }else{
                    $qb->orderBy('u.lastActivityAt', 'DESC');
                }
                break;

            case 'new':

                //$date = new \DateTime('30 days ago');
                $qb//->andWhere('u.signUpDate >= :date')
                    //->setParameter('date', $date->format('Y-m-d h:i:s'))
                    ->orderBy('u.id', 'DESC')
                ;
                break;

            case 'photo':

                $qb->join('u.photos', 'ph', 'WITH',
                    //$qb->expr()->eq("p.isValid", true)
                    $qb->expr()->andX(
                        $qb->expr()->eq('ph.isValid', true)//,
                        //$qb->expr()->eq('p.isMain', true)
                    )
                );
                $qb->expr()->count('ph.id');

                $qb->orderBy('u.id', 'DESC');
                //$qb->addOrderBy('p.id', 'DESC');

                $qb->addOrderBy('u.lastActivityAt', 'DESC');
                //var_dump($qb->getQuery()->getSQL());die;
                break;

            case 'popularity':
                //->setMaxResults($perPage)
                $qb->orderBy('u.views', 'DESC');
                $qb->addOrderBy('u.id', 'DESC');
                break;


            /*
             * Admin Filters
             */

            case 'total':
                $qb->orderBy('u.id', 'DESC');
                break;

            case 'active_and_not_frozen':

                $qb->where('u.isActive = 1')
                    ->andWhere('u.isFrozen = 0')
                    ->orderBy('u.id', 'DESC')
                ;
                break;

            case 'male':

                $qb->where('u.gender = 1')
                    ->orderBy('u.id', 'DESC')
                ;
                break;

            case 'female':

                $qb->where('u.gender = 2')
                    ->orderBy('u.id', 'DESC')
                ;
                break;

            case 'with_photos':

                $qb->join('u.photos', 'ph', 'WITH',
                    $qb->expr()->eq('ph.isValid', true)
                )->orderBy('u.id', 'DESC');

                //$qb->addOrderBy('u.lastActivityAt', 'DESC');

                break;

            case 'frozen':

                $qb->where('u.isFrozen = 1')
                    ->orderBy('u.id', 'DESC')
                ;
                break;

            case 'inactive':

                $qb->where('u.isActive = 0')
                    ->orderBy('u.id', 'DESC')
                ;
                break;

            case 'flagged':

                $qb->where('u.isFlagged = 1')
                    ->orderBy('u.id', 'DESC')
                ;
                break;

            case 'paying':

                $date = date("Y-m-d H:i:s");

                $qb->where("u.startSubscription <= '" . $date ."'")
                    ->andWhere("u.endSubscription >= '" . $date . "'")
                    ->orderBy('u.id', 'DESC')
                ;
                break;

        }


        if(isset($this->data['current_route']) && $this->data['current_route'] == 'users_public_list'){
            $qb->orderBy('u.id', 'DESC');
        }

    }



    public function getList($settings)
    {
        $this->currentUser = $settings['current_user'];
        $this->data = $settings['request_data'];

        $qb = $this->createQueryBuilder('u');
        $qb->where('u.isActive = 1')
            ->andWhere('u.isActivated = 1')
            ->andWhere('u.isNonLocked = 1')
            ->andwhere('u.isFrozen = 0')
            ->join('u.' . $settings['inverse_list'], 'list', 'WITH',
                $qb->expr()->eq('list.' . $settings['type'], $this->currentUser)
            )
        ;

        $this->setSearchFilter($qb);
        return $settings['paginator']->paginate($qb->getQuery(), $settings['page'], $settings['per_page']);
    }

    private function setFromToDateConditions($dateFrom, $dateTo, $dateField, $qb)
    {
        $dateArr_1 = explode("/", $dateFrom);
        $dateArr_2 = explode("/", $dateTo);

        $date_1 = $dateArr_1[2] . '-' . $dateArr_1[1] . '-' . $dateArr_1[0] . ' 00:00:00';
        $date_2 = $dateArr_2[2] . '-' . $dateArr_2[1] . '-' . $dateArr_2[0] . ' 23:59:59';

        $qb->andWhere("u." . $dateField . " >= '" . $date_1 ."'")
            ->andWhere("u." . $dateField . " <= '" . $date_2 ."'")
        ;
        //echo $date_1 . '<br>';
        //echo $date_2 . '<br><br>';
    }


    public function setAdminMode(){
        $this->admin = true;
        return $this;
    }

    public function setExportMode(){
        $this->export = true;
        return $this;
    }

    public function getData(){
        return $this->data;
    }

    public function getAdminStat(){
        return $this->getEntityManager()->getConnection()->query("CALL get_admin_stat")->fetch();
    }

    public function saveBanReason($users, $reason)
    {
        $qb = $this->createQueryBuilder('u');
        $qb->update()
            ->set('u.banReason', ':reason')
            ->where(
                $qb->expr()->in('u.id', ':users')
            )->setParameter('reason', $reason)
            ->setParameter('users', explode(',', $users))
        ;

        $qb->getQuery()->execute();
    }

    public function givePoint($toAll)
    {
        $qb = $this->createQueryBuilder('u');

        if($toAll == 1){
            $qb->update()
                ->set('u.points', 'u.points + 1')
                ->getQuery()
                ->execute()
            ;
        }
        else{
            $qb->update()
                ->set('u.points', 'u.points + 1')
                ->where('u.points = 0')
                ->getQuery()
                ->execute()
            ;
        }
    }

    public function onHomepage()
    {
        $qb = $this->createQueryBuilder('u');
        return $qb->where('u.isOnHomepage = 1')
            ->join('u.photos', 'ph', 'WITH',
                $qb->expr()->andX(
                    $qb->expr()->eq('ph.isMain', true),
                    $qb->expr()->eq('ph.isValid', true)
                )
            )
            ->getQuery()
            ->getResult()
        ;
    }


    public function getDialogs($currentUser)
    {
        $dialogs = array();
        $config = Config::getInstance();
        $userId = $currentUser->getId();
        $conn = $this->getEntityManager()->getConnection();
        $sql = "SELECT owner_id, member_id FROM communication WHERE (owner_id = ? OR member_id = ?) AND owner_id != member_id";
        $stmt = $conn->prepare($sql);
        $stmt->bindParam(1, $userId, \PDO::PARAM_INT);
        $stmt->bindParam(2, $userId, \PDO::PARAM_INT);
        $stmt->execute();
        $contacted = $stmt->fetchAll();
        $contactsArr = array();
        foreach ($contacted as $row){
            $contactsArr[] = $row['member_id'] == $userId ? $row['owner_id'] : $row['member_id'];
        }

        if(count($contactsArr)){
            $sql = "
                SELECT
                    u.id, u.gender_id, u.username, lm.date, lm.message, m.fromUser, m.isRead, p.id as photoId, p.ext,
                    (SELECT COUNT(messageId) FROM messenger WHERE toUser = ? AND fromUser = u.id AND isRead = 0) as newMessagesNumber
                FROM
                    user u
                JOIN
                    messengerLastMessages lm
                ON
                    ((lm.user1 = u.id AND lm.user2 = ?) OR (lm.user2 = u.id AND lm.user1 = ?)) AND lm.user2 != lm.user1
                JOIN
                    messenger m
                ON
                    (m.messageId = lm.messageId)
                LEFT JOIN
                    file p
                ON
                    p.user_id = u.id AND p.is_main = 1 AND p.is_valid = 1
                WHERE
                    u.id IN (" . implode(",", $contactsArr) . ") "
                    //. "AND u.is_active = 1 AND u.is_frozen = 0 "
                    . "AND u.is_non_locked = 1
                ORDER BY CASE WHEN newMessagesNumber > 0 THEN 1 ELSE 0 END DESC, lm.messageId DESC
            ";

            $stmt = $conn->prepare($sql);
            $stmt->bindParam(1, $userId, \PDO::PARAM_INT);
            $stmt->bindParam(2, $userId, \PDO::PARAM_INT);
            $stmt->bindParam(3, $userId, \PDO::PARAM_INT);
            $stmt->execute();
            $result = $stmt->fetchAll();

//            $user->getGender()->getId() == 1 and !$user->is2D() and !$user->isPaying()
//            and ($this->getEntityManager()->getRepository('AppBundle:Settings')->find(1)->getIsCharge();
            $isPaying = (
                ($currentUser->getGender()->getId() == 1 && ($currentUser->isPaying()/* || $currentUser->is2D()*/)) /* man isNew or paying */
                || $currentUser->getGender()->getId() == 2 /* woman */
                || !$this->getEntityManager()->getRepository('AppBundle:Settings')->find(1)->getIsCharge()); //site is not pay


            foreach($result as $row){
                $row['message'] = $isPaying
                    ? strip_tags(urldecode($row['message']))
                    : $config['payment']['text'];
                ;

                $row['faceWebPath'] = '/media/photos/' . $row['id'] . '/' . $row['photoId'] . '-face.' . $row['ext'];

                if(!is_file($_SERVER['DOCUMENT_ROOT'] . $row['faceWebPath'])){
                    $row['faceWebPath'] = '/media/photos/' . $row['id'] . '/' . $row['photoId'] . '.' . $row['ext'];
                    if(!is_file($_SERVER['DOCUMENT_ROOT'] . $row['faceWebPath'])){
                        $row['faceWebPath'] = '';
                        //$row['noPhoto'] = '/images/no_photo_thumb_' . $row['gender_id'] . '.jpg' ;
                        $row['noPhoto'] = '/images/no_photo_' . $row['gender_id'] . '.png';
                    }
                }

                $dialogs[] = $row;
            }



        }




        return $dialogs;

    }

    public function getUsersForLike($currentUser, $firstUser = false)
    {
        if(!$currentUser->hasValidPhotos()){
            return array('online' => array(), 'other' => array(), 'photos' => 0);
        }
        $em = $this->getEntityManager();
        $conn = $em->getConnection();
        $settings = $em->getRepository('AppBundle:Settings')->find(1);
        $considered_as_online_minutes_number = $settings->getUserConsideredAsOnlineAfterLastActivityMinutesNumber();

        $userId = $currentUser->getId();
        $genderId = $currentUser->getGender()->getId();
        $delay = new \DateTime();
        $delay->setTimestamp(strtotime($considered_as_online_minutes_number . ' minutes ago'));
        $userNotIn = '<> ?';
        $param2 = ($firstUser) ? $firstUser->getId() : $userId;

        $imageFolder = '/media/photos/';
        $sql = "
                SELECT
                    " /* . "CONCAT('" . $imageFolder . "',u.id,'/',i.id,'-face.',i.ext) as faceImage," */. " 
                    CONCAT('" . $imageFolder . "',u.id,'/',i.id,'.',i.ext) as image,
                    u.id, u.username, u.birthday, r.name as area
                FROM  
                    user u
                JOIN
                    zip_code zp
                    ON u.zip_code_id = zp.id
                JOIN
                    area a
                    ON zp.area_id = a.id
                JOIN
                    region r
                    ON a.region_id = r.id
                JOIN 
                    file i 
                    ON i.user_id = u.id AND i.is_main = 1 AND i.is_valid = 1 AND i.type = 1 		
                WHERE u.last_activity_at > ?
                AND u.id " . $userNotIn . "
                AND u.gender_id <> " . $genderId . "
                AND u.is_active = 1
                AND u.is_frozen = 0
                AND u.is_non_locked = 1
                AND NOT EXISTS (SELECT from_id FROM like_me WHERE from_id = u.id AND to_id = ? AND is_bingo = 1)
                AND NOT EXISTS (SELECT to_id FROM like_me WHERE to_id = u.id AND from_id = ?)			 
                ORDER BY RAND()
            ";

        $stmt = $conn->prepare($sql);
        $delayStr = $delay->format('Y-m-d H:i:s');
        $stmt->bindParam(1, $delayStr, \PDO::PARAM_STR);
        if($firstUser){
            $stmt->bindParam(2, $param2, \PDO::PARAM_STR);
        }else {
            $stmt->bindParam(2, $userId, \PDO::PARAM_INT);
        }
        $stmt->bindParam(3, $userId, \PDO::PARAM_INT);
        $stmt->bindParam(4, $userId, \PDO::PARAM_INT);
        $stmt->execute();
        $result = $stmt->fetchAll();

        if(count($result) < 200){
            //$top = 250 - count($result);
            $sql = "
                SELECT 
                    " /* . "CONCAT('" . $imageFolder . "',u.id,'/',i.id,'-face.',i.ext) as faceImage," */. "
                    CONCAT('" . $imageFolder . "',u.id,'/',i.id,'.',i.ext) as image,
                    u.id, u.username, u.birthday, r.name as area
                FROM  
                    user u		
                JOIN
                    zip_code zp
                    ON u.zip_code_id = zp.id
                JOIN
                    area a
                    ON zp.area_id = a.id
                JOIN
                    region r
                    ON a.region_id = r.id
                JOIN 
                    file i 
                    ON i.user_id = u.id AND i.is_main = 1 AND i.is_valid = 1 AND i.type = 1 		
                WHERE u.last_activity_at <= ?
                AND u.id " . $userNotIn . " 	
                AND u.gender_id <> " . $genderId . "
                AND u.is_active = 1
                AND u.is_frozen = 0
                AND u.is_non_locked = 1
                AND NOT EXISTS (SELECT from_id FROM like_me WHERE from_id = u.id AND to_id = ? AND is_bingo = 1)
                AND NOT EXISTS (SELECT to_id FROM like_me WHERE to_id = u.id AND from_id = ?)			
                "/* . "LIMIT " . $top */ . "
                ORDER BY RAND()
            ";

            $stmt = $conn->prepare($sql);
            $stmt->bindParam(1, $delayStr, \PDO::PARAM_STR);
            if($firstUser){
                $stmt->bindParam(2, $param2, \PDO::PARAM_STR);
            }else {
                $stmt->bindParam(2, $userId, \PDO::PARAM_INT);
            }
            $stmt->bindParam(3, $userId, \PDO::PARAM_INT);
            $stmt->bindParam(4, $userId, \PDO::PARAM_INT);
            $stmt->execute();
            $result2 = $stmt->fetchAll();
        }else{
            $result2 = false;
        }

        if($firstUser){
            $firstUserArr = array(
                'id' => $firstUser->getId(),
                'username' => $firstUser->getUsername(),
                'birthday' => $firstUser->getBirthday()->format('Y-m-d'),
                'image' => $firstUser->getMainPhoto()->getWebPath(),
                //'faceImage' => $firstUser->getMainPhoto()->getFaceWebPath(),
                //'age' => $firstUser->age(),
                'area' => $firstUser->getZipCode()->getArea()->getRegion()->getName(),
            );
            /*
            $sql = "SELECT * FROM like_me WHERE (from_id = ? and to_id = ?) or (to_id = ? and from_id = ?)";
            $stmt = $conn->prepare($sql);
            $firstUserId = $firstUser->getId();
            $stmt->bindParam(1, $userId, \PDO::PARAM_INT);
            $stmt->bindParam(2, $firstUserId, \PDO::PARAM_INT);
            $stmt->bindParam(3, $userId, \PDO::PARAM_INT);
            $stmt->bindParam(4, $firstUserId, \PDO::PARAM_INT);
            $userLikeMe = $stmt->fetchAll();
            if(count($userLikeMe) > 0){
                $like = $userLikeMe[0];
                if($like['from_id'] == (int)$userId)
                    $firstUserArr['i_like'] = true;
                else
                    $firstUserArr['bingo'] = $like['is_bingo'];
            }
            */
            $firstUserId = $firstUser->getId();
            $likeMe = $em->getRepository('AppBundle:LikeMe')->findOneBy(array('userFrom' => $userId, 'userTo' => $firstUserId));
            if(empty($likeMe)){
                $likeMe = $em->getRepository('AppBundle:LikeMe')->findOneBy(array('userFrom' => $firstUserId, 'userTo' => $userId));
            }

            //var_dump(!is_object($likeMe) or !$likeMe->getIsBingo());
            if(!is_object($likeMe) or !$likeMe->getIsBingo()) {
                array_unshift($result, $firstUserArr);
            }
        }

        return array('online' => $result, 'other' => $result2, 'photos' => count($currentUser->getPhotos()));
    }

    public function getlikeStatus($fromUser, $toUser, $bingoSplashStatus = false)
    {
        $fromUserId = $fromUser->getId();
        $toUserId = $toUser->getId();

        $em = $this->getEntityManager();
        //$conn = $em->getConnection();

       /* $sql = "SELECT * FROM likeMe WHERE (from_id = ? and to_id = ?) or (from_id = ? and to_id = ?)";
        $stmt = $conn->prepare($sql);
        $stmt->bindParam(1, $fromUserId, \PDO::PARAM_INT);
        $stmt->bindParam(2, $toUserId, \PDO::PARAM_INT);
        $stmt->bindParam(3, $toUserId, \PDO::PARAM_INT);
        $stmt->bindParam(4, $fromUserId, \PDO::PARAM_INT);
*/
        //$sql_str = $stmt;
        $likeMe = $em->getRepository('AppBundle:LikeMe')->findOneBy(array('userFrom' => $fromUserId, 'userTo' => $toUserId));
        if(empty($likeMe)){
            $likeMe = $em->getRepository('AppBundle:LikeMe')->findOneBy(array('userFrom' => $toUserId, 'userTo' => $fromUserId));
        }
        //$userLikeMe = $stmt->fetchAll();


        if(is_object($likeMe)){
            //$like = $userLikeMe[0];
            if($likeMe->getUserFrom()->getId() == $fromUserId and !$likeMe->getIsBingo() ){
                // I sended like.
                $result = 'i_send';
            }elseif(!$likeMe->getIsBingo() and $likeMe->getUserTo()->getId() == $fromUserId){
                // user sended me like
                $result = 'send_me';
            }elseif($likeMe->getIsBingo()){
                // has been bingo
                if(!$bingoSplashStatus) {
                    $result = 'bingo';
                }else {
                    if (($likeMe->getUserFrom()->getId() == $fromUserId and !$likeMe->getIsShowSplashFrom()) or ($likeMe->getUserTo()->getId() == $fromUserId and !$likeMe->getIsShowSplashTo())) {
                        $result = 'splash_not_show';
                    }else{
                        $result = 'splash_show_yet';
                    }
                }
            }
        }else{
            $result = 'none';
        }

        return $result;
    }

    public function sendUserLike($fromUser, $toUser){
        $status = $this->getlikeStatus($fromUser, $toUser);
        $em = $this->getEntityManager();
        switch ($status){
            case 'none':
                //send
                //add Like
                $likeMe = new LikeMe();
                $likeMe->setUserFrom($fromUser)->setUserTo($toUser);
                $em->persist($likeMe);
                $em->flush();
                //send notification
                $userNotification = new UserNotifications();
                $date = new \DateTime();
                $notification = $em->getRepository('AppBundle:Notifications')->find(1);
                $userNotification->setLikeMe($likeMe)->setUser($toUser)->setDate($date)->setNotification($notification);
                $em->persist($userNotification);
                $em->flush();
                $res = 'like';
            break;
            case 'send_me':
                //bingo
                $likeMe = $em->getRepository('AppBundle:LikeMe')->findOneBy(array('userFrom' => $toUser->getId(), 'userTo' => $fromUser->getId()));
                $likeMe->setIsBingo(true);
                $em->persist($likeMe);
                $em->flush();
                $fromUser->getNotifications();
                $em->persist($fromUser);
                $em->flush();

                $userNotification = new UserNotifications();
                $date = new \DateTime();
                $notification = $em->getRepository('AppBundle:Notifications')->find(2);
                $userNotification->setLikeMe($likeMe)->setUser($toUser)->setDate($date)->setNotification($notification);
                $em->persist($userNotification);
                $em->flush();

                $userNotification = new UserNotifications();
                $userNotification->setLikeMe($likeMe)->setUser($fromUser)->setDate($date)->setNotification($notification);
                $em->persist($userNotification);
                $em->flush();


                $settings = $em->getRepository('AppBundle:Settings')->find(1);
                //$subject = "NYSD | Bingo | Username: " . $fromUser->getUsername();
                $subject = 'NYRichdate Bingo is waiting for you :)';
                /*$text = '
                    <img style="float:right; width:100px;" src="https://www.nyrichdate.com' . $fromUser->getMainPhoto()->getFaceWebPath() . '" />
                    From user: ' . $fromUser->getUsername() . '<br />
                    ' . $notification->getTemplate();
                */
                $text = $fromUser->getUsername() . ' likes you too!
                    <br /><br />
                    <a href="https://www.nyrichdate.com/">Click here</a> to enter NYRichdate.com
                    <br /><br />
                    Or open the NYRichdate app on your mobile device and wait for a surprise... 
                    <br /><br />
                    Good luck! 
                    <br /><br />
                    Team NYRichdate.com <br />
                    <a href="https://www.nyrichdate.com/">www.nyrichdate.com</a>';


                $headers = "MIME-Version: 1.0" . "\r\n";
                $headers .= "Content-type:text/html;charset=UTF-8" . "\r\n";
                $headers .= 'From: ' . $settings->getContactEmail() . ' <' . $settings->getContactEmail() . '>' . "\r\n";

                //$subject1 = "NYSD | Bingo | Username: " . $toUser->getUsername();
                $subject1 = 'NYRichdate Bingo is waiting for you :)';
                /*$text1 = '
                    <img style="float:right; width:100px;" src="https://www.nyrichdate.com' . $toUser->getMainPhoto()->getFaceWebPath() . '" />
                    From user: ' . $toUser->getUsername() . '<br />
                    ' . $notification->getTemplate();
                */
                $text1 = $toUser->getUsername() . ' likes you too!
                    <br /><br />
                    <a href="https://www.nyrichdate.com/">Click here</a> to enter NYRichdate.com
                    <br /><br />
                    Or open the NYRichdate app on your mobile device and wait for a surprise... 
                    <br /><br />
                    Good luck! 
                    <br /><br />
                    Team NYRichdate.com <br />
                    <a href="https://www.nyrichdate.com/">www.nyrichdate.com</a>';
                if($toUser->getIsSentEmail()) {
                    mail($toUser->getEmail(), $subject, $text, $headers);
                }
                if($fromUser->getIsSentEmail()) {
                    mail($fromUser->getEmail(), $subject1, $text1, $headers);
                }
                $res = 'bingo';
            break;
            default:
                $res = 'sended';

        }

        return $status;
    }

    public function getSplashBingo($user)
    {
        $em = $this->getEntityManager();
        $res = false;
        //$conn = $em->getConnection();
        $bingos = $em->getRepository('AppBundle:LikeMe')->findBy(array('userFrom' => $user, 'isBingo' => 1, 'isShowSplashFrom' => 0));
        if(count($bingos) == 0){
            $bingos = $em->getRepository('AppBundle:LikeMe')->findBy(array('userTo' => $user, 'isBingo' => 1, 'isShowSplashTo' => 0));
        }
        if(count($bingos) > 0){
            $result = $bingos[0];
            if($result->getUserFrom()->getId() == $user->getId()){
                $contactUser = $result->getUserTo();
            }else{
                $contactUser = $result->getUserFrom();
            }

            $res = array(
                'id' => $result->getId(),
                'photo1' =>  $contactUser->getMainPhoto()->getFaceWebPath(),
                'photo2' =>  $user->getMainPhoto()->getFaceWebPath(),
                'username' =>  $contactUser->getUsername(),
                'contact_id' =>  $contactUser->getId(),
            );
        }

        return $res;
    }

    public function setSplashShowBingo($likeMeId, $userId)
    {
        $em = $this->getEntityManager();
        $bingo = $em->getRepository('AppBundle:LikeMe')->find($likeMeId);
        if($bingo) {
            if ($bingo->getUserFrom()->getId() == $userId) {
                $bingo->setIsShowSplashFrom(1);
            } else {
                $bingo->setIsShowSplashTo(1);
            }
            $em->persist($bingo);
            $em->flush();
        }
        return true;
    }

    /**
     * @param $reports
     * @return mixed
     */
    public function setCountReport($reports, $entity = true){

        $return = ($entity) ? new ArrayCollection() : array();
        //
        foreach ($reports as $report) {
            $data = json_decode($report->getParams(), true);
            $data['filter'] = 'report';

            $count = $this->setAdminMode()->search(
                array(
                    'current_user' => $this->find(111),
                    'data' => $data,
                    'getCount' => true
                )
            );

            $report->setCount($count);
            $res = ($entity) ? $report : array('id' => $report->getId(), 'count' => $report->getCount());
            $return[] = $res;
        }
        $this->data = null;

        return $return;
    }

    public function removeWordsBlocked($post, $fields = array('username','occupation','about','looking')){
        if(count($fields) > 0) {
            $em = $this->getEntityManager();
            $wordsBlocked = $em->getRepository('AppBundle:WordBlocked')->findAll();
            foreach ($wordsBlocked as $wordBlocked) {
                foreach ($fields as $field) {
                    if(isset($post[$field])) {
                        $post[$field] = str_replace($wordBlocked->getValue(), '', $post[$field]);
                    }
                }
            }
        }
        return $post;
    }

    public function getDistance($user1,$user2)
    {
        $distance = 0;
        if($user1->getLatitude() != null and $user1->getLongitude() != null and $user2->getLatitude() != null and $user2->getLongitude() != null) {
            $conn = $this->getEntityManager()->getConnection();
            $sql = "SELECT get_distance(" . $user1->getLatitude() . "," . $user1->getLongitude() . "," . $user2->getLatitude() . "," . $user2->getLongitude() . ") as distance";
            $stmt = $conn->prepare($sql);
            $stmt->execute();
            $distance = $stmt->fetchAll();
            $distance = number_format($distance[0]['distance'], 2, '.', '');
            if($distance > 9){
                $distance = (int)$distance;
            }
        }
        return $distance;
    }
}
